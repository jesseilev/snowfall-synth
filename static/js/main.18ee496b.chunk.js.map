{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","audio.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","href","Component","Boolean","window","location","hostname","match","choose","items","Math","floor","random","length","ROOT_FREQUENCY","TEMPO","CHORD","TONAL_FLOOR","TONAL_RANGE","ctx","AudioContext","offlineCtx","OfflineAudioContext","sampleRate","offlineGraph","createVirtualAudioGraph","audioContext","output","destination","currentTime","bufferSize","buffer","createBuffer","bufferOutput","getChannelData","i","oscWithGain","VG","_ref","gain","rest","Object","objectWithoutProperties","osc","snowflake","_ref2","frequency","pan","q","modulators","key","type","pow","panner","filter","Q","modulator","snowSynth","_ref3","partials","gainPattern","container","outputNozzle","inputNozzle","R","snowflakes","partial","assign","console","log","createPartials","_ref4","rootFrequency","nPartials","generateValueCurve","update","masterPan","compressor","threshold","knee","ratio","attack","release","masterGain","ss1","ss2","ss3","noise","loop","renderStartTime","promise","startRendering","then","renderedBuffer","tack","catch","error","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18ee496b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Generative Music Sketch\n        </header>\n        <main>\n          <a href='./'>\n            Refresh to hear a new atmosphere\n          </a>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import createVirtualAudioGraph, * as VG from 'virtual-audio-graph';\nimport * as R from 'ramda';\n\n\n// UTILS\n\nconst choose = items => (\n  items[ Math.floor(Math.random() * items.length) ]\n);\n\n\n// CONFIG\n\nconst N_PARTIALS = 32\nconst ROOT_FREQUENCY = choose([80, 100, 120]);\nconst BASS_BOOST = 0.9;\nconst TEMPO = Math.random() * 0.25 + 0.25;\nconst CHORD = choose([\n  [ 1,   5/3, 15/6 ],\n  [ 5/4, 3/2, 10/4 ],\n  [ 1,   3/2, 10/4 ]\n]);\nconst TONAL_FLOOR = 3 + Math.random() * 1;\nconst TONAL_RANGE = 6 + Math.random() * 3;\nconst TONAL_BOOST = 1;\nconst rhythmFrequencies = [4,6,8,10,12,16];\nconst TRACK_DURATION = 12;\n\n\n// AUDIO CONTEXT \n\nlet ctx = new AudioContext();\nlet offlineCtx = new OfflineAudioContext(2, ctx.sampleRate * TRACK_DURATION, 44100);\n\n\nlet offlineGraph = createVirtualAudioGraph({\n  audioContext: offlineCtx,\n  output: offlineCtx.destination\n});\n\nconst { currentTime } = offlineGraph;\n\n\n// WHITE NOISE BUFFER\nconst noiseDuration = 3;\nconst sampleRate = offlineGraph.audioContext.sampleRate;\nconst bufferSize = 2 * noiseDuration * sampleRate;\nlet buffer = ctx.createBuffer(noiseDuration, bufferSize, sampleRate);\nlet bufferOutput = buffer.getChannelData(0);\nfor (let i = 0; i < bufferSize; i++) {\n  bufferOutput[i] = Math.random() * 2 - 1;\n}\n\n\nconst oscWithGain = VG.createNode(({\n  gain,\n  ...rest\n}) => ({\n  'gain': VG.gain('output', {\n    gain: gain \n  }),\n\n  'osc': VG.oscillator('gain', rest)\n}));\n\n\nconst snowflake = VG.createNode(({\n  frequency,\n  gain,\n  pan,\n  q\n}) => {\n\n  const modulators = [\n    oscWithGain({ key: 'panner', destination: 'pan' }, { \n      gain: Math.random() * 1.5,\n      frequency: Math.random() * -8 + 16,\n      // choose(rhythmFrequencies) ** choose([-1]) * TEMPO,\n      type: choose(['sine', 'square', 'sawtooth', 'triangle'])\n    }),\n\n    oscWithGain({ key: 'gain', destination: 'gain' }, {\n      gain: gain * Math.random() * 0.2,\n      frequency: Math.random() * 4,\n      //choose(rhythmFrequencies) ** choose([-1]) * TEMPO,\n      type: choose(['sine', 'triangle'])\n    }),\n\n    oscWithGain({key: 'filter', destination: 'Q' }, {\n      gain: 2 ** (Math.random() * TONAL_RANGE + TONAL_FLOOR - 4),\n      frequency: Math.random() * -8 + 16,\n      //choose(rhythmFrequencies) ** choose([-1]) * TEMPO,\n      type: choose(['sawtooth', 'triangle', 'square'])\n    })\n  ];\n\n  return {\n    // 'compressor': VG.dynamicsCompressor('output', {\n    //   threshold: -50,\n    //   knee: 40,\n    //   ratio: 20,\n    //   attack: 0.0,\n    //   release: TEMPO * 0.25\n    // }),\n\n    'gain': VG.gain('output', {\n      gain: 0.001 * gain * (q ** TONAL_BOOST)\n    }),\n\n    'panner': VG.stereoPanner('gain', { \n      pan: pan \n    }),\n\n    'filter': VG.biquadFilter('panner', {\n      type: 'bandpass',\n      frequency: frequency,\n      Q: q\n    }, 'input'),\n\n    'modulator': choose(modulators)\n  }\n});\n\n\nconst snowSynth = VG.createNode(({\n  partials,\n  gainPattern\n}) => {\n\n\n  const container = {\n    'outputNozzle': VG.gain('output', {\n      gain: gainPattern\n    }),\n    'inputNozzle': VG.gain(\n      R.range(0, partials.length), // a list of all the snowflake keys\n      { gain: 1 }, \n      'input'\n    )\n  };\n\n  const snowflakes = R.map(\n    partial => snowflake('outputNozzle', partial), \n    partials\n  );\n\n  return Object.assign(container, snowflakes);\n});\n\n\nconsole.log(ROOT_FREQUENCY);\nconsole.log(CHORD);\nconsole.log(TONAL_FLOOR);\n\nconst createPartials = ({\n  rootFrequency,\n  nPartials\n}) => {\n  const partial = i => ({\n    gain: Math.random() / (i ** (1 + BASS_BOOST)),\n    pan: Math.random(),\n    frequency: rootFrequency * i,\n    q: 2 ** ( Math.random() * TONAL_RANGE + TONAL_FLOOR )\n  });\n\n  return R.map(partial, R.range(1, nPartials + 1));\n};\n\n\nconst generateValueCurve = length => (\n  R.map( () => choose([0.1, 4]), R.range(0, length) )\n);\n\nofflineGraph.update({\n  'masterPan': VG.stereoPanner('output', { pan: 0.1 } ),\n\n  'compressor': VG.dynamicsCompressor('masterPan', {\n    threshold: -100,\n    knee: 40,\n    ratio: 20,\n    attack: 0.0,\n    release: TEMPO * 0.25\n  }),\n\n  'masterGain': VG.gain('compressor', { gain: 0.1 }),\n\n  'ss1': snowSynth('masterGain', {\n    partials: createPartials({ rootFrequency: ROOT_FREQUENCY * CHORD[0], nPartials: N_PARTIALS}),\n    gainPattern: [ \n      'setValueCurveAtTime', \n      generateValueCurve(choose([8,16])), \n      currentTime, \n      TRACK_DURATION,\n    ]\n  }),\n\n  'ss2': snowSynth('masterGain', {\n    partials: createPartials({ rootFrequency: ROOT_FREQUENCY * CHORD[1], nPartials: N_PARTIALS}),\n    gainPattern: [ \n      'setValueCurveAtTime', \n      generateValueCurve(choose([12,24])), \n      currentTime, \n      TRACK_DURATION\n    ]\n  }),\n\n  'ss3': snowSynth('masterGain', {\n    partials: createPartials({ rootFrequency: ROOT_FREQUENCY * CHORD[2], nPartials: N_PARTIALS}),\n    gainPattern: [ \n      'setValueCurveAtTime', \n      generateValueCurve(choose([12,16])), \n      currentTime, \n      TRACK_DURATION,    \n    ]\n  }),\n\n  'noise': VG.bufferSource(['ss1', 'ss2', 'ss3'], {\n    buffer: buffer,\n    loop: true,\n  }),\n});\n\nconsole.log(offlineGraph);\n\nconst renderStartTime = currentTime;\n\nlet promise = offlineCtx.startRendering().then(renderedBuffer => {\n  console.log(\"Finished rendering! It took this many seconds:\");\n  console.log( ctx.currentTime - renderStartTime );\n\n  let onlineGraph = createVirtualAudioGraph({\n    audioContext: ctx,\n    sampleRate: ctx.sampleRate\n  });\n\n  onlineGraph.update({\n    'masterGain': VG.gain('output', {\n      gain: 1\n    }),\n    'tack': VG.bufferSource('masterGain', {\n      buffer: renderedBuffer,\n      loop: true\n    })\n  });\n}).catch(error => {\n  console.log(\"error!\");\n  console.log(error);\n});\n\nconsole.log(promise);\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Audio from './audio';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}