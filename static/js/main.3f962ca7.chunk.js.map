{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","audio.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","href","Component","Boolean","window","location","hostname","match","choose","items","Math","floor","random","length","ctx","AudioContext","graph","createVirtualAudioGraph","audioContext","output","destination","ROOT_FREQUENCY","currentTime","TEMPO","CHORD","rhythmFrequencies","sampleRate","bufferSize","buffer","createBuffer","bufferOutput","getChannelData","i","oscWithGain","VG","_ref","gain","rest","Object","objectWithoutProperties","osc","snowflake","_ref2","frequency","pan","q","pow","panner","filter","type","Q","panModulation","key","gainModulation","qModulation","snowSynth","_ref3","partials","inputNozzle","R","snowflakes","partial","assign","console","log","createPartials","_ref4","rootFrequency","nPartials","update","masterPan","compressor","threshold","knee","ratio","attack","release","masterGain","ss1","ss2","ss3","noise","loop","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f962ca7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Generative Music Sketch\n        </header>\n        <main>\n          <a href='./'>\n            Refresh to hear a new atmosphere\n          </a>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import createVirtualAudioGraph, * as VG from 'virtual-audio-graph';\nimport * as R from 'ramda';\n\n\n// UTILS\n\nconst choose = items => (\n  items[ Math.floor(Math.random() * items.length) ]\n);\n\n\n// AUDIO CONTEXT \nlet ctx = new AudioContext();\n\n\nlet graph = createVirtualAudioGraph({\n  audioContext: ctx,\n  output: ctx.destination\n});\n\nconst { currentTime } = graph;\nconst ROOT_FREQUENCY = choose([80, 100]);\nconst BASS_BOOST = 0.9;\nconst TEMPO = Math.random() * 0.15 + 0.25;\nconst CHORD = choose([\n  [ 1,   5/3, 15/6 ],\n  [ 5/4, 3/2, 10/4 ],\n  [ 1,   3/2, 10/4 ]\n]);\nconst TONAL_BOOST = 1;\nconst rhythmFrequencies = [1,1,1,2,2,2,4,4,8,16,3,3,6,6,9,12,18,24,36,48];\n\n\n// WHITE NOISE BUFFER\nconst noiseDuration = 3;\nconst sampleRate = graph.audioContext.sampleRate;\nconst bufferSize = 2 * noiseDuration * sampleRate;\nlet buffer = ctx.createBuffer(noiseDuration, bufferSize, sampleRate);\nlet bufferOutput = buffer.getChannelData(0);\nfor (let i = 0; i < bufferSize; i++) {\n  bufferOutput[i] = Math.random() * 2 - 1;\n}\n\n\nconst oscWithGain = VG.createNode(({\n  gain,\n  ...rest\n}) => ({\n  'gain': VG.gain('output', {\n    gain: gain \n  }),\n\n  'osc': VG.oscillator('gain', rest)\n}));\n\nconst snowflake = VG.createNode(({\n  frequency,\n  gain,\n  pan,\n  q\n}) => ({\n  'gain': VG.gain('output', {\n    gain: gain * (q ** (1.25))\n  }),\n\n  'panner': VG.stereoPanner('gain', { \n    pan: pan \n  }),\n\n  'filter': VG.biquadFilter('panner', {\n    type: 'bandpass',\n    frequency: frequency,\n    Q: q\n  }, 'input'),\n\n  'panModulation': oscWithGain({ key: 'panner', destination: 'pan' }, { \n    gain: Math.random() * 2,\n    frequency: choose(rhythmFrequencies) ** choose([1, -1, -1]) * TEMPO,\n    //2 ** (Math.random() * 10 - 6),\n    //2 ** ( [0,1,2,3,4][Math.floor(Math.random() * 5)] ),\n    type: choose(['sine', 'square', 'sawtooth', 'triangle'])\n  }),\n\n  'gainModulation': oscWithGain({ key: 'gain', destination: 'gain' }, {\n    gain: gain * q / (2 ** (Math.random() * 0.1)),\n    frequency: choose(rhythmFrequencies) ** choose([1, -1, -1]) * TEMPO,\n    //2 ** (Math.random() * 10 - 6),\n    //2 ** ( [0,1,2,3,4][Math.floor(Math.random() * 5)] ),\n    type: choose(['sine', 'square', 'sawtooth', 'triangle'])\n  }),\n\n  qModulation: oscWithGain({key: 'filter', destination: 'Q' }, {\n    gain: q / (2 ** (Math.random() * 0.5)),\n    frequency: choose(rhythmFrequencies) ** choose([1, -1, -1]) * TEMPO,\n    //2 ** (Math.random() * 10 - 6),\n    //2 ** ( [0,1,2,3,4][Math.floor(Math.random() * 5)] ),\n    type: choose(['sine', 'square', 'sawtooth', 'triangle'])\n  })\n}));\n\n\nconst snowSynth = VG.createNode(({\n  partials\n}) => {\n\n\n  const inputNozzle = {\n    'inputNozzle': VG.gain(\n      R.range(0, partials.length), \n      { gain: 1 }, \n      'input'\n    ),\n  };\n\n  const snowflakes = R.map(\n    partial => snowflake('output', partial), \n    partials\n  );\n\n\n  return Object.assign(inputNozzle, snowflakes);\n});\n\n\nconsole.log(ROOT_FREQUENCY);\nconsole.log(CHORD);\nconsole.log(TONAL_BOOST);\n\nconst createPartials = ({\n  rootFrequency,\n  nPartials\n}) => {\n  const partial = i => ({\n    gain: Math.random() / (i ** (1 + Math.random())),\n    pan: Math.random(),\n    frequency: rootFrequency * i,\n    q: 2 ** ( Math.random() * 7 + TONAL_BOOST )\n  });\n\n  return R.map(partial, R.range(1, nPartials + 1));\n};\n\ngraph.update({\n  'masterPan': VG.stereoPanner('output', { pan: 0.1 } ),\n\n  'compressor': VG.dynamicsCompressor('masterPan', {\n    threshold: -60,\n    knee: 80,\n    ratio: 24,\n    attack: 0.0,\n    release: 0.25\n  }),\n\n  'masterGain': VG.gain('compressor', { gain: 0.005 }),\n\n  'ss1': snowSynth('masterGain', {\n    partials: createPartials({ rootFrequency: ROOT_FREQUENCY * CHORD[0], nPartials: 15})\n  }),\n\n  'ss2': snowSynth('masterGain', {\n    partials: createPartials({ rootFrequency: ROOT_FREQUENCY * CHORD[1], nPartials: 15})\n  }),\n\n  'ss3': snowSynth('masterGain', {\n    partials: createPartials({ rootFrequency: ROOT_FREQUENCY * CHORD[2], nPartials: 15})\n  }),\n\n  'noise': VG.bufferSource(['ss1', 'ss2', 'ss3'], {\n    buffer: buffer,\n    loop: true,\n  }),\n});\n\nconsole.log(graph);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Audio from './audio';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}